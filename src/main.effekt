import src/lib
import src/jsondb
import list
import exception


def mainLoop(): Unit = {
  var active: Bool = true

  var state: TimerState = Stopped()

  var projectList = loadProjectList()

  var currentProject: Project = try{ head[Project](projectList) } with Exception[MissingValue] {
    def raise(exception: MissingValue, msg: String) = {
      println("Empty project list, creating standard project admin.")
      val newProject = Project("admin", [])
      projectList = projectList.append([newProject])
      newProject
    }
  }

  var startTime: String = ""
  var endTime: String = ""


  def stoppedInputHandler = new UserInput {
    def startTimer() = {
      println("Timer started")
      state = Running()
      startTime = getCurrentTime()
    }
    def stopTimer() = {
     println("Timer is already stopped.")
    }
    def switchProject(projectName: String) = { 
      println("Switching project to " ++ projectName)
      projectList = updateProjectList(projectList, currentProject)
      try {
        currentProject = do lookupProject(projectName)
      } with lookupProject { name =>
        val project = boundaryDefault[Project] { iterateProjectList(name, projectList) } {
          println("Project not found, creating new project.")
          projectList = projectList.append([Project(name, [])])
          Project(name,[])
        }
        resume(project)
      }
    }
    def quitMainLoop() = {
      active = false
    }
}

  def runningInputHandler = new UserInput {
    def startTimer() = {
      println("Timer is already running.")
    }
    def stopTimer() = {
      println("Timer stopped")
      state = Stopped()
      endTime = getCurrentTime()
      val timeEntry = TimeEntry(startTime, endTime)
      currentProject = Project(currentProject.name, currentProject.times.append([timeEntry]))
    }
    def switchProject(projectName: String) = { 
      println("Please stop the timer, before swtiching the project.")
    }
    def quitMainLoop() = {
      active = false
    }
}
 
  def initialInputHandler = new UserInput {
    def startTimer() = {
      sendTimerStartedRequest()
      startTime = getCurrentTime()
      state = Running()
      println("Timer started")
    }
    def stopTimer() = {
      println("You can't stop the timer at first.")
    }
    def switchProject(projectName: String) = { 
      stoppedInputHandler.switchProject(projectName)
    }
    def quitMainLoop() = {
      active = false
    }
}

  while (state match { case Stopped() => true case Running() => false }) handleConsoleInput() { initialInputHandler }
  
  //Main Loop
  while (active) {
    println("current project: " ++ currentProject.name)
    state match {
      case Running() => handleConsoleInput{ runningInputHandler }
      case Stopped() => handleConsoleInput{ stoppedInputHandler }
    }  
  }


  projectList = updateProjectList(projectList, currentProject)
  saveProjectList(projectList)

  projectList.foreach {
    case project =>
      val totalSeconds = sumTimeEntries(project.times)
      println(project.name ++ ": " ++ convertSecsToHMS(totalSeconds))
  }

}

def main(): Unit = {
  println("Welcome to to Timeify - your personal time tracker!")
  println("Type 's' to start the timer, 'p' to pause the timer, 's' to switch project or 'q' to quit and save.")
  mainLoop()
}